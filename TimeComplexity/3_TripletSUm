
// 1.
import java.util.HashSet;

public class Solution {	

	public static int tripletSum(int[] arr, int num) {
		//Your code goes here
		int count =0;
		for (int i = 0; i < arr.length - 1; i++) {
            HashSet <Integer> s = new HashSet<Integer>();
            int curr_sum = num - arr[i];
            for (int j = i + 1; j < arr.length; j++)
            {
                if (s.contains(curr_sum - arr[j]))
                {
                    count++;
                }
                s.add(arr[j]);
            }
        }
		return count;
	}
}
//2.
import java.util.HashSet;

public class Solution {	

	public static int tripletSum(int[] arr, int num) {
		//Your code goes here
        int l, r;
        int arr_size = arr.length;
        quickSort(arr, 0, arr_size - 1);
        int count=0;

        
        for (int i = 0; i < arr_size - 2; i++) {
 
            l = i + 1; 
            r = arr_size - 1; 
            while (l < r) {
                if (arr[i] + arr[l] + arr[r] == num) {
                    count++;
                }
                else if (arr[i] + arr[l] + arr[r] < num)
                    l++;
 
                else // A[i] + A[l] + A[r] > sum
                    r--;
            }
        }
 
        
        return count;
    }
 
   static int partition(int A[], int si, int ei)
    {
        int x = A[ei];
        int i = (si - 1);
        int j;
 
        for (j = si; j <= ei - 1; j++) {
            if (A[j] <= x) {
                i++;
                int temp = A[i];
                A[i] = A[j];
                A[j] = temp;
            }
        }
        int temp = A[i + 1];
        A[i + 1] = A[ei];
        A[ei] = temp;
        return (i + 1);
    }
 
   static void quickSort(int A[], int si, int ei)
    {
        int pi;

        if (si < ei) {
            pi = partition(A, si, ei);
            quickSort(A, si, pi - 1);
            quickSort(A, pi + 1, ei);
        }
    }
}
