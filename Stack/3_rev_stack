/*rev stack*/
import java.util.Stack;

public class Solution {

	public static void reverseStack(Stack<Integer> input, Stack<Integer> extra) {
		//Your code goes here
		revStack(input);

	}
	public static void revStack(Stack<Integer> input){
		if(input.size()>0){
		int temp = input.peek();
		input.pop();
		revStack(input);

		invertStack(input,temp);
		}
	}
	public static void invertStack(Stack<Integer> input, int val){
		if(input.isEmpty())
		input.push(val);
		else{
			int temp = input.peek();
			input.pop();
			invertStack(input, val);
			input.push(temp);
		}
	}
}
/*2nd approach*/
import java.util.Stack;

public class Solution {

	public static void reverseStack(Stack<Integer> input, Stack<Integer> extra) {
		//Your code goes here
		if(input.isEmpty()) {
			return ;
		}
		int temp = input.pop();
		reverseStack(input, extra);
		while(!input.isEmpty() ) {
			extra.push(input.pop());
		}
		input.push(temp);
		while(!extra.isEmpty()) {
			input.push(extra.pop());
		}
	}
}
