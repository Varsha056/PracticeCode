/*
Given 2 sorted arrays (in increasing order), find a path through the intersections that produces maximum sum and return the maximum sum.
That is, we can switch from one array to another array only at common elements.
If no intersection element is present, we need to take sum of all elements from the array with greater sum.
i/p
1 5 10 15 20 25
2 4 5 9 15
o/p
81
*/

public class Solution {

	public static long maximumSumPath(int[] input1, int[] input2) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, they are passed as function arguments.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/

		long sum1=0;
		long sum2=0;
		long result=0;
		int m = input1.length;
		int n = input2.length;
		int i =0;
		int j =0;

		while (i < m && j < n) {
            if (input1[i] < input2[j]) {
                sum1 += input1[i++];
            } else if (input1[i] > input2[j]) {
                sum2 += input2[j++];
            } else {
                result += maxVal(sum1, sum2) + input1[i];
                sum1 = sum2 = 0;
                i++;
                j++;
				while (i < m && j < n && input1[i] == input2[j]) 
                {
                    result += input1[i++];
                    j++;
                }
            }
        }

        while (i < m) {
            sum1 += input1[i++];
        }

        while (j < n) {
            sum2 += input2[j++];
        }

		
		result+=maxVal(sum1, sum2);
		return result;
	}
	static long maxVal(long sum1, long sum2){
		return sum1>sum2 ? sum1:sum2;
	}
}
