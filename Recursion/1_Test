/*
Given a 2D integer array with n rows and m columns. Print the 0th row from input n times, 1st row n-1 timesâ€¦..(n-1)th row will be printed 1 time.
Input format :
Line 1 : No of rows (n) and no of columns (m) (separated by single space)
Line 2 : Row 1 elements (separated by space)
Line 3 : Row 2 elements (separated by space)
Line 4 : and so on
i/p
3 3
1 2 3
4 5 6
7 8 9
o/p
1 2 3
1 2 3
1 2 3
4 5 6
4 5 6
7 8 9
*/
public class Solution {
	public static void print2DArray(int input[][]) {
		// Write your code here
		int m = input.length;
		if(m<=0)
		return;
		int n =input[0].length;
		int k =0;
		
		while(k<m){ 
		printArray(input, k,m);
		k++;
		}
		
	}
	public static void printArray(int [][]input, int k, int m){
		int l=k;
		while(k<m){
			for(int i=0;i<m;i++){
				System.out.print(input[l][i]+" ");
				}
			System.out.println();
		k++;
		}
	}
}
/*
You have made a smartphone app and want to set its subscription price such that the profit earned is maximised.
There are certain users who will subscribe to your app only if their budget is greater than or equal to your price.
You will be provided with a list of size N having budgets of subscribers and you need to return the maximum profit that you can earn.
Lets say you decide that price of your app is Rs. x and there are N number of subscribers. So maximum profit you can earn is :
i/p
34 78 90 15 67
o/p 201 //67*3
*/

import java.util.Arrays;

public class solution {

	public static int maximumProfit(int budget[]) {
		// Write your code here
		Arrays.sort(budget);

		int maxProf = Integer.MIN_VALUE;
	
		for(int i=0;i<budget.length;i++){
			int sum = budget[i]*(budget.length-i);
			maxProf = Math.max(maxProf, sum);
		}
		return maxProf;
	}

}
